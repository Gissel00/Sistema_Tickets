{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nexport class CategoriesService {\n  constructor(jwtService, postService, getService) {\n    this.jwtService = jwtService;\n    this.postService = postService;\n    this.getService = getService;\n  }\n  createCategory(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.post('/categorias', request, {\n      headers\n    });\n  }\n  getCategories() {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.getAll('/categorias', new HttpParams(), headers);\n  }\n  editCategory(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.put(`/categorias/${request._id}`, request, {\n      headers\n    });\n  }\n  deleteCategory(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.delete(`/categorias/eliminar/${id}`, {\n      headers\n    });\n  }\n  materializeCategories(categories) {\n    const categoryMaterialized = [];\n    categories.forEach(category => {\n      categoryMaterialized.push({\n        _id: category._id,\n        nombre: category.nombre,\n        color: category.color,\n        grupo_id: category.nombre,\n        creador_id: category.creador_id,\n        modificador_id: category.modificador_id,\n        creado_a: new Date(category.creado_a).toLocaleDateString('es-ES'),\n        actualizado_a: new Date(category.actualizado_a).toLocaleDateString('es-ES')\n      });\n    });\n    return categoryMaterialized;\n  }\n}\nCategoriesService.ɵfac = function CategoriesService_Factory(t) {\n  return new (t || CategoriesService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService));\n};\nCategoriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoriesService,\n  factory: CategoriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","helper","CategoriesService","constructor","jwtService","postService","getService","createCategory","request","token","getToken","isNullOrWhitespace","Error","headers","post","getCategories","getAll","editCategory","put","_id","deleteCategory","id","delete","materializeCategories","categories","categoryMaterialized","forEach","category","push","nombre","color","grupo_id","creador_id","modificador_id","creado_a","Date","toLocaleDateString","actualizado_a","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\categories.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CategoriesResponse, Category, CategoryCreate, CategoryEdit } from '../interfaces/categories.interface';\r\nimport { MessageResponse } from '../interfaces/status.interface';\r\nimport { ApiService } from './api.service';\r\nimport { JwtService } from './jwt.service';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport * as helper from '../helpers';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoriesService {\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private postService: ApiService<MessageResponse>,\r\n    private getService: ApiService<CategoriesResponse>\r\n  ) {}\r\n\r\n  createCategory(request: CategoryCreate): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.post('/categorias', request, { headers });\r\n  }\r\n\r\n  getCategories(): Observable<CategoriesResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.getAll('/categorias',  new HttpParams(), headers);\r\n  }\r\n\r\n  editCategory(request: CategoryEdit): Observable<CategoriesResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.put(`/categorias/${request._id}`, request, { headers });\r\n  }\r\n\r\n  deleteCategory(id: string): Observable<CategoriesResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.delete(`/categorias/eliminar/${id}`, { headers });\r\n  }\r\n\r\n  materializeCategories(categories: CategoriesResponse[]): Category[] {\r\n    const categoryMaterialized: Category[] = [];\r\n    categories.forEach((category) => {\r\n      categoryMaterialized.push({\r\n        _id: category._id,\r\n        nombre: category.nombre,\r\n        color: category.color,\r\n        grupo_id: category.nombre,\r\n        creador_id: category.creador_id,\r\n        modificador_id: category.modificador_id,\r\n        creado_a: new Date(category.creado_a).toLocaleDateString('es-ES'),\r\n        actualizado_a: new Date(category.actualizado_a).toLocaleDateString(\r\n          'es-ES'\r\n        ),\r\n      });\r\n    });\r\n    return categoryMaterialized;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}