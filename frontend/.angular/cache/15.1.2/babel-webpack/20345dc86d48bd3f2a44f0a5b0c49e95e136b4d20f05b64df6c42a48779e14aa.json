{"ast":null,"code":"import * as helper from '../helpers';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nexport class FlujoService {\n  constructor(jwtService, getService, postService) {\n    this.jwtService = jwtService;\n    this.getService = getService;\n    this.postService = postService;\n  }\n  createFlujo(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.post('/flujos', request, {\n      headers\n    });\n  }\n  getFlujos() {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.getAll('/flujos', new HttpParams(), headers);\n  }\n  editFlujo(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.put(`/flujos/${request._id}`, request, {\n      headers\n    });\n  }\n  deleteFlujo(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.delete(`/flujos/eliminar/${id}`, {\n      headers\n    });\n  }\n  materializeFlujos(flujos) {\n    const flujosMaterialized = [];\n    flujos.forEach(flujo => {\n      flujosMaterialized.push({\n        _id: flujo._id,\n        nombre: flujo.nombre,\n        tiempo_resolucion: flujo.tiempo_resolucion,\n        departamento: flujo.departamento.nombreDepartamento,\n        modificador_id: flujo.modificador_id,\n        creado_a: helper.formatDate(flujo.creado_a),\n        actualizado_a: helper.formatDate(flujo.actualizado_a)\n      });\n    });\n    return flujosMaterialized;\n  }\n}\nFlujoService.ɵfac = function FlujoService_Factory(t) {\n  return new (t || FlujoService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService));\n};\nFlujoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlujoService,\n  factory: FlujoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["helper","HttpHeaders","HttpParams","FlujoService","constructor","jwtService","getService","postService","createFlujo","request","token","getToken","isNullOrWhitespace","Error","headers","post","getFlujos","getAll","editFlujo","put","_id","deleteFlujo","id","delete","materializeFlujos","flujos","flujosMaterialized","forEach","flujo","push","nombre","tiempo_resolucion","departamento","nombreDepartamento","modificador_id","creado_a","formatDate","actualizado_a","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\flujo.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Flujo, FlujoCreate, FlujoEdit, FlujoResponse, MessageResponse } from '../interfaces/flujo.interface';\r\nimport { ApiService } from './api.service';\r\nimport { JwtService } from './jwt.service';\r\nimport * as helper from '../helpers';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FlujoService {\r\n\r\n  constructor(private jwtService: JwtService, private getService: ApiService<FlujoResponse>, private postService: ApiService<MessageResponse>) { }\r\n\r\n  createFlujo(request: FlujoCreate): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.post('/flujos', request, { headers });\r\n  }\r\n\r\n  getFlujos(): Observable<FlujoResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.getAll('/flujos',  new HttpParams(), headers);\r\n  }\r\n\r\n  editFlujo(request: FlujoEdit): Observable<FlujoResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.put(`/flujos/${request._id}`, request, { headers });\r\n  }\r\n\r\n  deleteFlujo(id: string): Observable<FlujoResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.delete(`/flujos/eliminar/${id}`, { headers });\r\n  }\r\n\r\n  materializeFlujos(flujos: FlujoResponse[]): Flujo[] {\r\n    const flujosMaterialized: Flujo[] = [];\r\n    flujos.forEach((flujo) => {\r\n      flujosMaterialized.push({\r\n        _id: flujo._id,\r\n        nombre: flujo.nombre,\r\n        tiempo_resolucion: flujo.tiempo_resolucion,\r\n        departamento: flujo.departamento.nombreDepartamento,\r\n        modificador_id: flujo.modificador_id,\r\n        creado_a: helper.formatDate(flujo.creado_a),\r\n        actualizado_a: helper.formatDate(flujo.actualizado_a),\r\n      });\r\n    }\r\n    );\r\n    return flujosMaterialized;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}