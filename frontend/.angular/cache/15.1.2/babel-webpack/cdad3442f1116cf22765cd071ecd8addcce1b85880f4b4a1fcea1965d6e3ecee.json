{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class CommentService {\n  constructor(jwtService, apiService, apiServicePushing, http) {\n    this.jwtService = jwtService;\n    this.apiService = apiService;\n    this.apiServicePushing = apiServicePushing;\n    this.http = http;\n  }\n  getCommentsByTicketId(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.apiService.getAll(`/comentarios/${id}`, new HttpParams(), headers);\n  }\n  createComment(comment) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.apiServicePushing.post('/comentarios', comment, {\n      headers\n    });\n  }\n  downloadFile(attachmentId) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'x-access-token': `${token}`\n    });\n    return this.http.get(`http://localhost:3000/api/v1/archivos/${attachmentId}`, {\n      headers,\n      responseType: 'arraybuffer'\n    });\n  }\n}\nCommentService.ɵfac = function CommentService_Factory(t) {\n  return new (t || CommentService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i3.HttpClient));\n};\nCommentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CommentService,\n  factory: CommentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAW9D,OAAO,KAAKC,MAAM,MAAM,YAAY;;;;;AAKpC,OAAM,MAAOC,cAAc;EACzBC,YACUC,UAAsB,EACtBC,UAAuC,EACvCC,iBAA6C,EAC7CC,IAAe;IAHf,eAAU,GAAVH,UAAU;IACV,eAAU,GAAVC,UAAU;IACV,sBAAiB,GAAjBC,iBAAiB;IACjB,SAAI,GAAJC,IAAI;EACX;EAEHC,qBAAqB,CAACC,EAAU;IAC9B,MAAMC,KAAK,GAAG,IAAI,CAACN,UAAU,CAACO,QAAQ,EAAE;IACxC,IAAIV,MAAM,CAACW,kBAAkB,CAACF,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;IACjE,MAAMC,OAAO,GAAG,IAAIf,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAE,GAAGW,KAAK;KAC3B,CAAC;IAEF,OAAO,IAAI,CAACL,UAAU,CAACU,MAAM,CAC3B,gBAAgBN,EAAE,EAAE,EACpB,IAAIT,UAAU,EAAE,EAChBc,OAAO,CACR;EACH;EAEAE,aAAa,CAACC,OAAsB;IAClC,MAAMP,KAAK,GAAG,IAAI,CAACN,UAAU,CAACO,QAAQ,EAAE;IACxC,IAAIV,MAAM,CAACW,kBAAkB,CAACF,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;IACjE,MAAMC,OAAO,GAAG,IAAIf,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAE,GAAGW,KAAK;KAC3B,CAAC;IAEF,OAAO,IAAI,CAACJ,iBAAiB,CAACY,IAAI,CAAC,cAAc,EAAED,OAAO,EAAE;MAACH;IAAO,CAAC,CAAC;EACxE;EAEAK,YAAY,CAACC,YAAoB;IAC/B,MAAMV,KAAK,GAAG,IAAI,CAACN,UAAU,CAACO,QAAQ,EAAE;IACxC,IAAIV,MAAM,CAACW,kBAAkB,CAACF,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;IAEjE,MAAMC,OAAO,GAAG,IAAIf,WAAW,CAAC;MAC9B,gBAAgB,EAAE,GAAGW,KAAK;KAC3B,CAAC;IAEF,OAAO,IAAI,CAACH,IAAI,CAACc,GAAG,CAAC,yCAAyCD,YAAY,EAAE,EAAE;MAC5EN,OAAO;MAAGQ,YAAY,EAAE;KACzB,CAAC;EACJ;;AA7CWpB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;EAAAsB,YAFb;AAAM","names":["HttpHeaders","HttpParams","helper","CommentService","constructor","jwtService","apiService","apiServicePushing","http","getCommentsByTicketId","id","token","getToken","isNullOrWhitespace","Error","headers","getAll","createComment","comment","post","downloadFile","attachmentId","get","responseType","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\comment.service.ts"],"sourcesContent":["import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {\r\n  CommentCreate,\r\n  CommentPushing,\r\n  CommentResponse,\r\n} from '../interfaces/comment.interface';\r\nimport { ApiService } from './api.service';\r\nimport { JwtService } from './jwt.service';\r\nimport * as helper from '../helpers';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommentService {\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private apiService: ApiService<CommentResponse>,\r\n    private apiServicePushing: ApiService<CommentPushing>,\r\n    private http:HttpClient\r\n  ) {}\r\n\r\n  getCommentsByTicketId(id: string): Observable<CommentResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.apiService.getAll(\r\n      `/comentarios/${id}`,\r\n      new HttpParams(),\r\n      headers\r\n    );\r\n  }\r\n\r\n  createComment(comment: CommentCreate): Observable<CommentPushing> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.apiServicePushing.post('/comentarios', comment, {headers});\r\n  }\r\n\r\n  downloadFile(attachmentId: String):Observable<any>{\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n\r\n    const headers = new HttpHeaders({\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.http.get(`http://localhost:3000/api/v1/archivos/${attachmentId}`, { \r\n      headers , responseType: 'arraybuffer'\r\n    });\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}