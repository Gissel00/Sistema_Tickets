{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { PrimeIcons } from 'primeng/api';\nlet CategoriesComponent = class CategoriesComponent {\n  get getCategories() {\n    return [...this.categories];\n  }\n  constructor(userService, categoryService, toastr) {\n    this.userService = userService;\n    this.categoryService = categoryService;\n    this.toastr = toastr;\n    this.categories = [];\n    this.visibleModal = false;\n    this.deleteModal = false;\n    this.label = 'Crear';\n    this.header = '';\n    this.action = '';\n    this.message = '';\n    this.messageResponse = '';\n    this.rowCreate = {};\n    this.rowSelectedEdit = {};\n    this.rowSelectedDelete = {\n      _id: ''\n    };\n    this.columns = [{\n      name: 'Id',\n      key: '_id',\n      show: false,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'Nombre',\n      key: 'nombre',\n      show: true,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'Color',\n      key: 'color',\n      show: true,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'Grupo',\n      key: 'grupo_id',\n      show: true,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'Creador',\n      key: 'creador_id',\n      show: false,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'modificador',\n      key: 'modificador_id',\n      show: false,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'Creado',\n      key: 'creado_a',\n      show: true,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'Actualizado',\n      key: 'actualizado_a',\n      show: true,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true\n    }, {\n      name: 'Acciones',\n      key: 'acciones',\n      show: true,\n      isAvailableOnCreation: true,\n      isAvailableOnEdit: true,\n      hasEditButton: true,\n      hasRemoveButton: true,\n      hasCreateButton: true,\n      edit: row => {\n        this.rowSelectedEdit = row;\n        this.visibleModal = true;\n        this.label = 'Guardar Cambios';\n        this.header = 'Editar grupo';\n        this.action = 'edit';\n      },\n      remove: row => {\n        this.rowSelectedDelete = row;\n        this.label = 'Eliminar';\n        this.header = 'Eliminar grupo';\n        this.action = 'delete';\n        this.message = `¿Está seguro que desea eliminar el grupo: ${row._id}?`;\n        this.deleteModal = true;\n      },\n      create: () => {\n        this.action = 'create';\n        this.visibleModal = true;\n        this.header = 'Crear grupo';\n        this.label = 'Crear';\n      },\n      createIcon: PrimeIcons.PLUS,\n      editIcon: PrimeIcons.PENCIL,\n      removeIcon: PrimeIcons.TRASH\n    }];\n    this.columnsToDeleteByEdit = ['acciones', 'creado_a', 'actualizado_a', 'creador_id', 'modificador_id'];\n    this.columnsToDeleteByCreate = ['acciones', 'creado_a', 'actualizado_a', 'creador_id', 'modificador_id', '_id'];\n  }\n  ngOnInit() {\n    this.userService.populate();\n    this.fetchCategories();\n  }\n  fetchCategories() {\n    this.categoryService.getCategories().subscribe({\n      next: response => {\n        this.categories = this.categoryService.materializeCategories(response);\n      },\n      error: error => console.error(error)\n    });\n  }\n  filteredColums() {\n    let filteredColumns = this.columns.filter(column => column.show === true);\n    return filteredColumns;\n  }\n  // onSubmitCategory(): void {\n  //   this.visibleModal = false;\n  //   this.deleteModal = false;\n  //   if (this.action === 'edit') {\n  //     this.categoryService.editCategory(this.rowSelectedEdit).subscribe({\n  //       next: (response) => {\n  //         this.toastr.success('Se modifico el registro', 'Éxito');\n  //         this.categories = this.categories.map(category => {\n  //           if (category._id === response._id) {\n  //             return {\n  //               _id: response._id,\n  //               nombre: response.nombre,\n  //               color: response.color,\n  //               grupo_id: response.grupo_id,\n  //               creador_id: response.creador_id,\n  //               modificador_id: response.modificador_id,\n  //               creado_a: new Date(response.creado_a).toLocaleDateString('es-ES'),\n  //               actualizado_a: new Date(response.actualizado_a).toLocaleDateString(\n  //                 'es-ES'\n  //               ),\n  //             };\n  //           }\n  //           return category;\n  //         });\n  //       },\n  //       error: (error) => {\n  //         this.toastr.error(error?.message, 'Error');\n  //       },\n  //     });\n  //     this.rowSelectedEdit = {} as CategoryEdit;\n  //   }\n  //   if (this.action === 'create') {\n  //     this.categoryService.createCategory(this.rowCreate).subscribe({\n  //       next: (response) => {\n  //         this.toastr.success(response.message, 'Éxito');\n  //         this.fetchCategories();\n  //       },\n  //     });\n  //     this.rowCreate = {} as CategoryCreate;\n  //   }\n  //   if (this.action === 'delete') {\n  //     this.categoryService\n  //       .deleteCategory(this.rowSelectedDelete._id)\n  //       .subscribe({\n  //         next: (response) => {\n  //           this.toastr.success(response.message, 'Éxito');\n  //           this.fetchCategories();\n  //         },\n  //         error: (error) => this.toastr.error(error?.error?.message, 'Error'),\n  //       });\n  //     this.rowSelectedDelete = {} as CategoryDelete;\n  //   }\n  // }\n  createNewRecord() {\n    this.action = 'create';\n    this.visibleModal = true;\n    this.header = 'Crear estado';\n    this.label = 'Crear';\n  }\n  getObjectByAction() {\n    return this.action === 'edit' ? this.rowSelectedEdit : this.rowCreate;\n  }\n  getColumnsByAction() {\n    if (this.action === 'edit') {\n      return this.columns.filter(column => !this.columnsToDeleteByEdit.includes(column.key));\n    }\n    return this.columns.filter(column => !this.columnsToDeleteByCreate.includes(column.key));\n  }\n};\nCategoriesComponent = __decorate([Component({\n  selector: 'app-categories',\n  templateUrl: './categories.component.html',\n  styles: []\n})], CategoriesComponent);\nexport { CategoriesComponent };","map":{"version":3,"mappings":"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","names":["Component","PrimeIcons","CategoriesComponent","getCategories","categories","constructor","userService","categoryService","toastr","_id","name","key","show","isAvailableOnCreation","isAvailableOnEdit","hasEditButton","hasRemoveButton","hasCreateButton","edit","row","rowSelectedEdit","visibleModal","label","header","action","remove","rowSelectedDelete","message","deleteModal","create","createIcon","PLUS","editIcon","PENCIL","removeIcon","TRASH","ngOnInit","populate","fetchCategories","subscribe","next","response","materializeCategories","error","console","filteredColums","filteredColumns","columns","filter","column","createNewRecord","getObjectByAction","rowCreate","getColumnsByAction","columnsToDeleteByEdit","includes","columnsToDeleteByCreate","selector","templateUrl","styles"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\pages\\categories\\categories.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { PrimeIcons } from 'primeng/api';\r\nimport { UserService } from 'src/app/core';\r\nimport {\r\n  CategoriesResponse,\r\n  Category,\r\n  CategoryCreate,\r\n  CategoryDelete,\r\n  CategoryEdit,\r\n} from 'src/app/core/interfaces/categories.interface';\r\nimport { ColumnTable } from 'src/app/core/interfaces/sidebar.links.interface';\r\nimport { CategoriesService } from 'src/app/core/services/categories.service';\r\n\r\n@Component({\r\n  selector: 'app-categories',\r\n  templateUrl: './categories.component.html',\r\n  styles: [],\r\n})\r\nexport class CategoriesComponent {\r\n  private categories: Category[] = [];\r\n  get getCategories(): Category[] {\r\n    return [...this.categories];\r\n  }\r\n  visibleModal: boolean = false;\r\n  deleteModal: boolean = false;\r\n  label: string = 'Crear';\r\n  header: string = '';\r\n  action: string = '';\r\n  message: string = '';\r\n  messageResponse: string = '';\r\n  rowCreate: CategoryCreate = {} as CategoryCreate;\r\n  rowSelectedEdit: CategoryEdit = {} as CategoryEdit;\r\n  rowSelectedDelete: CategoryDelete = { _id: '' };\r\n  columns: ColumnTable[] = [\r\n    {\r\n      name: 'Id',\r\n      key: '_id',\r\n      show: false,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'Nombre',\r\n      key: 'nombre',\r\n      show: true,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'Color',\r\n      key: 'color',\r\n      show: true,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'Grupo',\r\n      key: 'grupo_id',\r\n      show: true,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'Creador',\r\n      key: 'creador_id',\r\n      show: false,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'modificador',\r\n      key: 'modificador_id',\r\n      show: false,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'Creado',\r\n      key: 'creado_a',\r\n      show: true,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'Actualizado',\r\n      key: 'actualizado_a',\r\n      show: true,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n    },\r\n    {\r\n      name: 'Acciones',\r\n      key: 'acciones',\r\n      show: true,\r\n      isAvailableOnCreation: true,\r\n      isAvailableOnEdit: true,\r\n      hasEditButton: true,\r\n      hasRemoveButton: true,\r\n      hasCreateButton: true,\r\n      edit: (row: CategoryEdit) => {\r\n        this.rowSelectedEdit = row;\r\n        this.visibleModal = true;\r\n        this.label = 'Guardar Cambios';\r\n        this.header = 'Editar grupo';\r\n        this.action = 'edit';\r\n      },\r\n      remove: (row: CategoryDelete) => {\r\n        this.rowSelectedDelete = row;\r\n        this.label = 'Eliminar';\r\n        this.header = 'Eliminar grupo';\r\n        this.action = 'delete';\r\n        this.message = `¿Está seguro que desea eliminar el grupo: ${row._id}?`;\r\n        this.deleteModal = true;\r\n      },\r\n      create: () => {\r\n        this.action = 'create';\r\n        this.visibleModal = true;\r\n        this.header = 'Crear grupo';\r\n        this.label = 'Crear';\r\n      },\r\n      createIcon: PrimeIcons.PLUS,\r\n      editIcon: PrimeIcons.PENCIL,\r\n      removeIcon: PrimeIcons.TRASH,\r\n    },\r\n  ];\r\n\r\n  constructor(\r\n    private userService: UserService,\r\n    private categoryService: CategoriesService,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.userService.populate();\r\n    this.fetchCategories();\r\n  }\r\n\r\n  fetchCategories(): void {\r\n    this.categoryService.getCategories().subscribe({\r\n      next: (response) => {\r\n        this.categories = this.categoryService.materializeCategories(response);\r\n      },\r\n      error: (error) => console.error(error),\r\n    });\r\n  }\r\n\r\n  filteredColums(): ColumnTable[] {\r\n    let filteredColumns = this.columns.filter(\r\n      (column: ColumnTable) => column.show === true\r\n    );\r\n\r\n    return filteredColumns;\r\n  }\r\n\r\n  // onSubmitCategory(): void {\r\n  //   this.visibleModal = false;\r\n  //   this.deleteModal = false;\r\n  //   if (this.action === 'edit') {\r\n  //     this.categoryService.editCategory(this.rowSelectedEdit).subscribe({\r\n  //       next: (response) => {\r\n  //         this.toastr.success('Se modifico el registro', 'Éxito');\r\n  //         this.categories = this.categories.map(category => {\r\n  //           if (category._id === response._id) {\r\n  //             return {\r\n  //               _id: response._id,\r\n  //               nombre: response.nombre,\r\n  //               color: response.color,\r\n  //               grupo_id: response.grupo_id,\r\n  //               creador_id: response.creador_id,\r\n  //               modificador_id: response.modificador_id,\r\n  //               creado_a: new Date(response.creado_a).toLocaleDateString('es-ES'),\r\n  //               actualizado_a: new Date(response.actualizado_a).toLocaleDateString(\r\n  //                 'es-ES'\r\n  //               ),\r\n  //             };\r\n  //           }\r\n  //           return category;\r\n  //         });\r\n  //       },\r\n  //       error: (error) => {\r\n  //         this.toastr.error(error?.message, 'Error');\r\n  //       },\r\n  //     });\r\n  //     this.rowSelectedEdit = {} as CategoryEdit;\r\n  //   }\r\n  //   if (this.action === 'create') {\r\n  //     this.categoryService.createCategory(this.rowCreate).subscribe({\r\n  //       next: (response) => {\r\n  //         this.toastr.success(response.message, 'Éxito');\r\n  //         this.fetchCategories();\r\n  //       },\r\n  //     });\r\n  //     this.rowCreate = {} as CategoryCreate;\r\n  //   }\r\n  //   if (this.action === 'delete') {\r\n  //     this.categoryService\r\n  //       .deleteCategory(this.rowSelectedDelete._id)\r\n  //       .subscribe({\r\n  //         next: (response) => {\r\n  //           this.toastr.success(response.message, 'Éxito');\r\n  //           this.fetchCategories();\r\n  //         },\r\n  //         error: (error) => this.toastr.error(error?.error?.message, 'Error'),\r\n  //       });\r\n  //     this.rowSelectedDelete = {} as CategoryDelete;\r\n  //   }\r\n  // }\r\n\r\n  createNewRecord(): void {\r\n    this.action = 'create';\r\n    this.visibleModal = true;\r\n    this.header = 'Crear estado';\r\n    this.label = 'Crear';\r\n  }\r\n\r\n  getObjectByAction(): CategoryEdit | CategoryCreate {\r\n    return this.action === 'edit' ? this.rowSelectedEdit : this.rowCreate;\r\n  }\r\n\r\n  columnsToDeleteByEdit: string[] = [\r\n    'acciones',\r\n    'creado_a',\r\n    'actualizado_a',\r\n    'creador_id',\r\n    'modificador_id',\r\n  ];\r\n  columnsToDeleteByCreate: string[] = [\r\n    'acciones',\r\n    'creado_a',\r\n    'actualizado_a',\r\n    'creador_id',\r\n    'modificador_id',\r\n    '_id',\r\n  ];\r\n  getColumnsByAction(): ColumnTable[] {\r\n    if (this.action === 'edit') {\r\n      return this.columns.filter(\r\n        (column: ColumnTable) =>\r\n          !this.columnsToDeleteByEdit.includes(column.key)\r\n      );\r\n    }\r\n    return this.columns.filter(\r\n      (column: ColumnTable) =>\r\n        !this.columnsToDeleteByCreate.includes(column.key)\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}