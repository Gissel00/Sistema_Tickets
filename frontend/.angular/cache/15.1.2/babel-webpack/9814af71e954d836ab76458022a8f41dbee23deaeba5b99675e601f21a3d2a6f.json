{"ast":null,"code":"import { environment } from '../../../env/env';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./jwt.service\";\nexport class ApiService {\n  constructor(http, jwtService) {\n    this.http = http;\n    this.jwtService = jwtService;\n  }\n  formatErrors(error) {\n    return throwError(error.error);\n  }\n  get(path, params = new HttpParams(), headers = new HttpHeaders(), responseType) {\n    return this.http.get(`${environment.api_url}${path}`, {\n      params,\n      headers,\n      ...(responseType && responseType)\n    }).pipe(catchError(this.formatErrors));\n  }\n  getAll(path, params = new HttpParams(), headers = new HttpHeaders()) {\n    return this.http.get(`${environment.api_url}${path}`, {\n      params,\n      headers\n    }).pipe(catchError(this.formatErrors));\n  }\n  put(path, body = {}, options = {}) {\n    return this.http.put(`${environment.api_url}${path}`, JSON.stringify(body), options).pipe(catchError(this.formatErrors));\n  }\n  post(path, body = {}, options = {}) {\n    return this.http.post(`${environment.api_url}${path}`, JSON.stringify(body), options).pipe(catchError(this.formatErrors));\n  }\n  delete(path, options = {}) {\n    return this.http.delete(`${environment.api_url}${path}`, options).pipe(catchError(this.formatErrors));\n  }\n  postForm(path, body, options = {}) {\n    return this.http.post(`${environment.api_url}${path}`, body, options).pipe(catchError(this.formatErrors));\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtService));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAAqBC,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAC1E,SAAqBC,UAAU,QAAQ,MAAM;AAE7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAG3C,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,IAAgB,EAAUC,UAAsB;IAAhD,SAAI,GAAJD,IAAI;IAAsB,eAAU,GAAVC,UAAU;EAAe;EAE/DC,YAAY,CAACC,KAAU;IAC7B,OAAOP,UAAU,CAACO,KAAK,CAACA,KAAK,CAAC;EAChC;EAEAC,GAAG,CAACC,IAAY,EAAEC,SAAoB,IAAIX,UAAU,EAAE,EAAEY,UAAsB,IAAIb,WAAW,EAAE,EAAEc,YAAoB;IACnH,OAAO,IAAI,CAACR,IAAI,CACbI,GAAG,CAAI,GAAGX,WAAW,CAACgB,OAAO,GAAGJ,IAAI,EAAE,EAAE;MAAEC,MAAM;MAAEC,OAAO;MAAE,IAAIC,YAAY,IAAKA,YAAa;IAAC,CAAE,CAAC,CACjGE,IAAI,CAACb,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAS,MAAM,CAACN,IAAY,EAAEC,SAAoB,IAAIX,UAAU,EAAE,EAAEY,UAAsB,IAAIb,WAAW,EAAE;IAChG,OAAO,IAAI,CAACM,IAAI,CACbI,GAAG,CAAM,GAAGX,WAAW,CAACgB,OAAO,GAAGJ,IAAI,EAAE,EAAE;MAAEC,MAAM;MAAEC;IAAO,CAAE,CAAC,CAC9DG,IAAI,CAACb,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAU,GAAG,CAACP,IAAY,EAAEQ,OAAe,EAAE,EAAEC,UAAkB,EAAE;IACvD,OAAO,IAAI,CAACd,IAAI,CACbY,GAAG,CAAI,GAAGnB,WAAW,CAACgB,OAAO,GAAGJ,IAAI,EAAE,EAAEU,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAEC,OAAO,CAAC,CACtEJ,IAAI,CAACb,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAe,IAAI,CAACZ,IAAY,EAAEQ,OAAe,EAAE,EAAEC,UAAkB,EAAE;IACxD,OAAO,IAAI,CAACd,IAAI,CACbiB,IAAI,CAAI,GAAGxB,WAAW,CAACgB,OAAO,GAAGJ,IAAI,EAAE,EAAEU,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAEC,OAAO,CAAC,CACvEJ,IAAI,CAACb,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAgB,MAAM,CAACb,IAAY,EAAES,UAAkB,EAAE;IACvC,OAAO,IAAI,CAACd,IAAI,CACbkB,MAAM,CAAI,GAAGzB,WAAW,CAACgB,OAAO,GAAGJ,IAAI,EAAE,EAAES,OAAO,CAAC,CACnDJ,IAAI,CAACb,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;EAEAiB,QAAQ,CAACd,IAAY,EAAEQ,IAAS,EAAEC,UAAkB,EAAE;IACpD,OAAO,IAAI,CAACd,IAAI,CACbiB,IAAI,CAAI,GAAGxB,WAAW,CAACgB,OAAO,GAAGJ,IAAI,EAAE,EAAEQ,IAAI,EAAEC,OAAO,CAAC,CACvDJ,IAAI,CAACb,UAAU,CAAC,IAAI,CAACK,YAAY,CAAC,CAAC;EACxC;;AAzCWJ,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAsB,SAAVtB,UAAU;AAAA","names":["environment","HttpHeaders","HttpParams","throwError","catchError","ApiService","constructor","http","jwtService","formatErrors","error","get","path","params","headers","responseType","api_url","pipe","getAll","put","body","options","JSON","stringify","post","delete","postForm","factory"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { environment } from '../../../env/env';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { JwtService } from './jwt.service';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ApiService<T> {\r\n  constructor(private http: HttpClient, private jwtService: JwtService) {}\r\n\r\n  private formatErrors(error: any) {\r\n    return throwError(error.error);\r\n  }\r\n\r\n  get(path: string, params:HttpParams = new HttpParams(), headers:HttpHeaders = new HttpHeaders(), responseType?:Object): Observable<T> {\r\n    return this.http\r\n      .get<T>(`${environment.api_url}${path}`, { params, headers, ...(responseType && (responseType)) })\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  getAll(path: string, params:HttpParams = new HttpParams(), headers:HttpHeaders = new HttpHeaders()): Observable<T[]> {\r\n    return this.http\r\n      .get<T[]>(`${environment.api_url}${path}`, { params, headers })\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  put(path: string, body: Object = {}, options: Object = {}): Observable<T> {\r\n    return this.http\r\n      .put<T>(`${environment.api_url}${path}`, JSON.stringify(body), options)\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  post(path: string, body: Object = {}, options: Object = {}): Observable<T> {\r\n    return this.http\r\n      .post<T>(`${environment.api_url}${path}`, JSON.stringify(body), options)\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  delete(path: string, options: Object = {}): Observable<T> {\r\n    return this.http\r\n      .delete<T>(`${environment.api_url}${path}`, options)\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n  postForm(path: string, body: any, options: Object = {}): Observable<T> {\r\n    return this.http\r\n      .post<T>(`${environment.api_url}${path}`, body, options)\r\n      .pipe(catchError(this.formatErrors));\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}