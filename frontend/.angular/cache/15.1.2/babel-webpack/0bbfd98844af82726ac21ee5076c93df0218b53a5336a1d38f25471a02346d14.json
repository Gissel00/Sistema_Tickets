{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nexport class GroupService {\n  constructor(jwtService, postService, getService) {\n    this.jwtService = jwtService;\n    this.postService = postService;\n    this.getService = getService;\n  }\n  createGroup(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.post('/grupos', request, {\n      headers\n    });\n  }\n  getGroups() {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.getAll('/grupos', new HttpParams(), headers);\n  }\n  editGroup(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.put(`/grupos/${request._id}`, request, {\n      headers\n    });\n  }\n  deleteGroup(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.delete(`/grupos/eliminar/${id}`, {\n      headers\n    });\n  }\n}\nGroupService.ɵfac = function GroupService_Factory(t) {\n  return new (t || GroupService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService));\n};\nGroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupService,\n  factory: GroupService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAC9D,OAAO,KAAKC,MAAM,MAAM,YAAY;;;;AAKpC,OAAM,MAAOC,YAAY;EACvBC,YACUC,UAAsB,EACtBC,WAAwC,EACxCC,UAAqC;IAFrC,eAAU,GAAVF,UAAU;IACV,gBAAW,GAAXC,WAAW;IACX,eAAU,GAAVC,UAAU;EACjB;EAEHC,WAAW,CAACC,OAAoB;IAC9B,MAAMC,KAAK,GAAG,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE;IACxC,IAAIT,MAAM,CAACU,kBAAkB,CAACF,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;IACjE,MAAMC,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAE,GAAGU,KAAK;KAC3B,CAAC;IAEF,OAAO,IAAI,CAACJ,WAAW,CAACS,IAAI,CAAC,SAAS,EAAEN,OAAO,EAAE;MAAEK;IAAO,CAAE,CAAC;EAC/D;EAEAE,SAAS;IACP,MAAMN,KAAK,GAAG,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE;IACxC,IAAIT,MAAM,CAACU,kBAAkB,CAACF,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;IACjE,MAAMC,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAE,GAAGU,KAAK;KAC3B,CAAC;IAEF,OAAO,IAAI,CAACH,UAAU,CAACU,MAAM,CAAC,SAAS,EAAG,IAAIhB,UAAU,EAAE,EAAEa,OAAO,CAAC;EACtE;EAEAI,SAAS,CAACT,OAAkB;IAC1B,MAAMC,KAAK,GAAG,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE;IACxC,IAAIT,MAAM,CAACU,kBAAkB,CAACF,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;IACjE,MAAMC,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAE,GAAGU,KAAK;KAC3B,CAAC;IAEF,OAAO,IAAI,CAACJ,WAAW,CAACa,GAAG,CAAC,WAAWV,OAAO,CAACW,GAAG,EAAE,EAAEX,OAAO,EAAE;MAAEK;IAAO,CAAE,CAAC;EAC7E;EAEAO,WAAW,CAACC,EAAU;IACpB,MAAMZ,KAAK,GAAG,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE;IACxC,IAAIT,MAAM,CAACU,kBAAkB,CAACF,KAAK,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,UAAU,CAAC;IACjE,MAAMC,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,gBAAgB,EAAE,GAAGU,KAAK;KAC3B,CAAC;IAEF,OAAO,IAAI,CAACJ,WAAW,CAACiB,MAAM,CAAC,oBAAoBD,EAAE,EAAE,EAAE;MAAER;IAAO,CAAE,CAAC;EACvE;;AAjDWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAqB,SAAZrB,YAAY;EAAAsB,YAFX;AAAM","names":["HttpHeaders","HttpParams","helper","GroupService","constructor","jwtService","postService","getService","createGroup","request","token","getToken","isNullOrWhitespace","Error","headers","post","getGroups","getAll","editGroup","put","_id","deleteGroup","id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\group.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { GroupCreate, GroupEdit, GroupResponse, MessageResponse } from '../interfaces/group.interface';\r\nimport { JwtService } from './jwt.service';\r\nimport { ApiService } from './api.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport * as helper from '../helpers';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupService {\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private postService: ApiService<MessageResponse>,\r\n    private getService: ApiService<GroupResponse>\r\n  ) {}\r\n\r\n  createGroup(request: GroupCreate): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.post('/grupos', request, { headers });\r\n  }\r\n\r\n  getGroups(): Observable<GroupResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.getAll('/grupos',  new HttpParams(), headers);\r\n  }\r\n\r\n  editGroup(request: GroupEdit): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.put(`/grupos/${request._id}`, request, { headers });\r\n  }\r\n\r\n  deleteGroup(id: string): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.delete(`/grupos/eliminar/${id}`, { headers });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}