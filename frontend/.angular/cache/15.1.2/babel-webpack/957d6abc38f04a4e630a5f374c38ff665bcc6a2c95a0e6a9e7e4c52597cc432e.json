{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./\";\nexport class TicketService {\n  constructor(jwtService, postService, getService) {\n    this.jwtService = jwtService;\n    this.postService = postService;\n    this.getService = getService;\n  }\n  createTicket(request) {\n    debugger;\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.post('/tickets', request, {\n      headers\n    });\n  }\n  updateTicket(id, request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.put(`/tickets/${id}`, request, {\n      headers\n    });\n  }\n  getTickets() {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.getAll('/tickets', new HttpParams(), headers);\n  }\n  getTicketById(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.get(`/tickets/${id}`, new HttpParams(), headers);\n  }\n  materializeResponseToTicket(response) {\n    const tickets = [];\n    response.forEach(ticketResponse => {\n      const ticket = {\n        _id: ticketResponse._id,\n        asunto: ticketResponse.asunto,\n        contenido: ticketResponse.contenido,\n        estado: ticketResponse.estado_id.nombre,\n        prioridad: ticketResponse.prioridad_id.nombre,\n        creador: ticketResponse.creador_id.nombres.split(\" \", 1) + ' ' + ticketResponse.creador_id.apellidos.split(\" \", 1),\n        categoria: ticketResponse.categoria_id.nombre,\n        flujo: ticketResponse.trabajo_flujo_id.nombre,\n        modificador: ticketResponse.modificador_id?.email ?? '',\n        creado_a: new Date(ticketResponse.creado_a).toLocaleDateString('es-ES'),\n        actualizado_a: new Date(ticketResponse.actualizado_a).toLocaleDateString('es-ES'),\n        foto_perfil: ticketResponse.creador_id.foto_perfil\n      };\n      tickets.push(ticket);\n    });\n    return tickets;\n  }\n  materializeResponseToTicketById(response) {\n    const ticket = {\n      _id: response._id,\n      asunto: response.asunto,\n      contenido: response.contenido,\n      estado: response.estado_id.nombre,\n      prioridad: response.prioridad_id.nombre,\n      creador: response.creador_id.nombres.split(\" \", 1) + ' ' + response.creador_id.apellidos.split(\" \", 1),\n      categoria: response.categoria_id.nombre,\n      flujo: response.trabajo_flujo_id.nombre,\n      modificador: response.modificador_id?.email ?? '',\n      creado_a: new Date(response.creado_a).toLocaleDateString('es-ES'),\n      actualizado_a: new Date(response.actualizado_a).toLocaleDateString('es-ES'),\n      foto_perfil: response.creador_id.foto_perfil\n    };\n    return ticket;\n  }\n}\nTicketService.ɵfac = function TicketService_Factory(t) {\n  return new (t || TicketService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i1.ApiService));\n};\nTicketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TicketService,\n  factory: TicketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","helper","TicketService","constructor","jwtService","postService","getService","createTicket","request","token","getToken","isNullOrWhitespace","Error","headers","post","updateTicket","id","put","getTickets","getAll","getTicketById","get","materializeResponseToTicket","response","tickets","forEach","ticketResponse","ticket","_id","asunto","contenido","estado","estado_id","nombre","prioridad","prioridad_id","creador","creador_id","nombres","split","apellidos","categoria","categoria_id","flujo","trabajo_flujo_id","modificador","modificador_id","email","creado_a","Date","toLocaleDateString","actualizado_a","foto_perfil","push","materializeResponseToTicketById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\ticket.service.ts"],"sourcesContent":["import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  CreateTicket,\r\n  Ticket,\r\n  TicketPostResponse,\r\n  TicketResponse,\r\n  UpdateTicketStatus\r\n} from '../interfaces/ticket.interface';\r\nimport { ApiService, JwtService } from './';\r\nimport * as helper from '../helpers';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TicketService {\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private postService: ApiService<TicketPostResponse>,\r\n    private getService: ApiService<TicketResponse>\r\n  ) {\r\n  }\r\n\r\n  \r\n  createTicket(request: CreateTicket): Observable<TicketPostResponse> {\r\n    debugger\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.post('/tickets', request, { headers });\r\n  }\r\n\r\n  updateTicket(id: number, request: UpdateTicketStatus): Observable<TicketPostResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.put(`/tickets/${id}`, request, { headers });\r\n  }\r\n\r\n  getTickets(): Observable<TicketResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.getAll('/tickets',  new HttpParams(), headers);\r\n  }\r\n\r\n  getTicketById(id: string): Observable<TicketResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.get(`/tickets/${id}`, new HttpParams(), headers);\r\n  }\r\n\r\n  materializeResponseToTicket(response:TicketResponse[]){\r\n    const tickets: Ticket[] = [];\r\n    response.forEach((ticketResponse: TicketResponse) => {\r\n      const ticket: Ticket = {\r\n        _id: ticketResponse._id,\r\n        asunto: ticketResponse.asunto,\r\n        contenido: ticketResponse.contenido,\r\n        estado: ticketResponse.estado_id.nombre,\r\n        prioridad: ticketResponse.prioridad_id.nombre,\r\n        creador: ticketResponse.creador_id.nombres.split(\" \", 1) + ' ' + ticketResponse.creador_id.apellidos.split(\" \",1),\r\n        categoria: ticketResponse.categoria_id.nombre,\r\n        flujo: ticketResponse.trabajo_flujo_id.nombre,\r\n        modificador: ticketResponse.modificador_id?.email ?? '',\r\n        creado_a: new Date(ticketResponse.creado_a).toLocaleDateString('es-ES'),\r\n        actualizado_a: new Date(ticketResponse.actualizado_a).toLocaleDateString('es-ES'),\r\n        foto_perfil: ticketResponse.creador_id.foto_perfil\r\n      };\r\n      tickets.push(ticket);\r\n    });\r\n    return tickets;\r\n  }\r\n\r\n  materializeResponseToTicketById(response:TicketResponse){\r\n    const ticket: Ticket = {\r\n      _id: response._id,\r\n      asunto: response.asunto,\r\n      contenido: response.contenido,\r\n      estado: response.estado_id.nombre,\r\n      prioridad: response.prioridad_id.nombre,\r\n      creador: response.creador_id.nombres.split(\" \",1) + ' ' + response.creador_id.apellidos.split(\" \",1),\r\n      categoria: response.categoria_id.nombre,\r\n      flujo: response.trabajo_flujo_id.nombre,\r\n      modificador: response.modificador_id?.email ?? '',\r\n      creado_a: new Date(response.creado_a).toLocaleDateString('es-ES'),\r\n      actualizado_a: new Date(response.actualizado_a).toLocaleDateString('es-ES'),\r\n      foto_perfil: response.creador_id.foto_perfil\r\n    };\r\n    return ticket;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}