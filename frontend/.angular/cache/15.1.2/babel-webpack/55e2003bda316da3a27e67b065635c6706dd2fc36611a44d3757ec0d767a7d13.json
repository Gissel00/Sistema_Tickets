{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class FileStorageServices {\n  constructor(jwtService, postService, getService, http) {\n    this.jwtService = jwtService;\n    this.postService = postService;\n    this.getService = getService;\n    this.http = http;\n  }\n  uploadFile(ticketId, file) {\n    const token = this.jwtService.getToken();\n    let formData = new FormData();\n    formData.append('file', file, file.name);\n    formData.append('ticket', ticketId.toString());\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'x-access-token': `${token}`\n    });\n    return this.postService.postForm('/archivos', formData, {\n      headers\n    });\n  }\n  downloadFile(attachmentId) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'x-access-token': `${token}`\n    });\n    return this.http.get(`http://localhost:3000/api/v1/archivos/${attachmentId}`, {\n      headers,\n      responseType: 'arraybuffer'\n    });\n  }\n  downloadProfileImg(attachmentId) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'x-access-token': `${token}`\n    });\n    const responseType = {\n      responseType: 'arraybuffer'\n    };\n    return this.getService.get(`/archivos/foto/${attachmentId}`, new HttpParams(), headers, responseType);\n  }\n  getListOfFiles(tickeId) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.getAll(`/archivos/lista/${tickeId}`, new HttpParams(), headers);\n  }\n  materilizeFileReponse(response) {\n    const files = [];\n    response.forEach(file => {\n      files.push({\n        _id: file._id,\n        ticket: file.ticket,\n        gDriveFileId: file.gDriveFileId,\n        fileNameAndExtension: file.fileNameAndExtension,\n        creado_a: new Date(file.creado_a).toLocaleString(),\n        fileContentType: file.fileContentType,\n        actualizado_a: file.actualizado_a\n      });\n    });\n    return files;\n  }\n}\nFileStorageServices.ɵfac = function FileStorageServices_Factory(t) {\n  return new (t || FileStorageServices)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i3.HttpClient));\n};\nFileStorageServices.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FileStorageServices,\n  factory: FileStorageServices.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","helper","FileStorageServices","constructor","jwtService","postService","getService","http","uploadFile","ticketId","file","token","getToken","formData","FormData","append","name","toString","isNullOrWhitespace","Error","headers","postForm","downloadFile","attachmentId","get","responseType","downloadProfileImg","getListOfFiles","tickeId","getAll","materilizeFileReponse","response","files","forEach","push","_id","ticket","gDriveFileId","fileNameAndExtension","creado_a","Date","toLocaleString","fileContentType","actualizado_a","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\file.storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport { JwtService } from './jwt.service';\r\nimport { ApiService } from './api.service';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport * as helper from '../helpers';\r\nimport { environment } from '../../../env/env';\r\nimport { FileMetadata, FileMetadataResponse } from '../interfaces/files.storage.interfaces';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FileStorageServices {\r\n    \r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private postService: ApiService<any>,\r\n    private getService: ApiService<any>,\r\n    private http:HttpClient\r\n    ) { }\r\n  \r\n  uploadFile(ticketId: Number, file: any):Observable<any> {\r\n    const token = this.jwtService.getToken();\r\n    let formData = new FormData(); \r\n\r\n    formData.append('file', file, file.name);\r\n    formData.append('ticket',ticketId.toString());\r\n\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n        'x-access-token': `${token}`\r\n      });\r\n    return this.postService.postForm('/archivos', formData, { headers })\r\n  }\r\n\r\n  downloadFile(attachmentId: String):Observable<any>{\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n\r\n    const headers = new HttpHeaders({\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.http.get(`http://localhost:3000/api/v1/archivos/${attachmentId}`, { \r\n      headers , responseType: 'arraybuffer'\r\n    });\r\n  }\r\n\r\n  downloadProfileImg(attachmentId: String):Observable<any>{\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n\r\n    const headers = new HttpHeaders({\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    const responseType = {\r\n      responseType: 'arraybuffer'\r\n    }\r\n    \r\n    return this.getService.get(`/archivos/foto/${attachmentId}`, new HttpParams(), headers, responseType);\r\n  }\r\n\r\n  getListOfFiles(tickeId: Number): Observable<FileMetadataResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.getAll(`/archivos/lista/${tickeId}`,  new HttpParams(), headers);\r\n  }\r\n\r\n  materilizeFileReponse(response: any): FileMetadata[] {\r\n    const files: FileMetadata[] = [];\r\n    response.forEach((file: any) => {\r\n        files.push({\r\n        _id: file._id,\r\n        ticket: file.ticket,\r\n        gDriveFileId: file.gDriveFileId,\r\n        fileNameAndExtension: file.fileNameAndExtension,\r\n        creado_a: new Date(file.creado_a).toLocaleString(),\r\n        fileContentType: file.fileContentType,\r\n        actualizado_a: file.actualizado_a\r\n      });\r\n    });\r\n    return files;\r\n  }\r\n\r\n  \r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}