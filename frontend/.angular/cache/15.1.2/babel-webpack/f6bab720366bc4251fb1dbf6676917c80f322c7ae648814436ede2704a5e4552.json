{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nexport class HttpTokenInterceptor {\n  constructor(jwtService) {\n    this.jwtService = jwtService;\n  }\n  intercept(req, next) {\n    const isFileUpload = req.url.includes('archivos') || req.responseType === 'arraybuffer';\n    const headersConfig = {\n      ...(!isFileUpload && {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }),\n      'Authorization': ''\n    };\n    const token = this.jwtService.getToken();\n    if (token) {\n      headersConfig['Authorization'] = `Token ${token}`;\n    }\n    const request = req.clone({\n      setHeaders: headersConfig\n    });\n    return next.handle(request);\n  }\n}\nHttpTokenInterceptor.ɵfac = function HttpTokenInterceptor_Factory(t) {\n  return new (t || HttpTokenInterceptor)(i0.ɵɵinject(i1.JwtService));\n};\nHttpTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpTokenInterceptor,\n  factory: HttpTokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,oBAAoB;EAC/BC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAe;EAE7CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,YAAY,GAAGF,GAAG,CAACG,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,IAAIJ,GAAG,CAACK,YAAY,KAAK,aAAa;IACvF,MAAMC,aAAa,GAAG;MACnB,IAAK,CAACJ,YAAY,IAAK;QACtB,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;OACT,CAAC;MACJ,eAAe,EAAG;KACnB;IAED,MAAMK,KAAK,GAAG,IAAI,CAACT,UAAU,CAACU,QAAQ,EAAE;IAExC,IAAID,KAAK,EAAE;MACTD,aAAa,CAAC,eAAe,CAAC,GAAG,SAASC,KAAK,EAAE;;IAGnD,MAAME,OAAO,GAAGT,GAAG,CAACU,KAAK,CAAC;MAAEC,UAAU,EAAEL;IAAa,CAAE,CAAC;IACxD,OAAOL,IAAI,CAACW,MAAM,CAACH,OAAO,CAAC;EAC7B;;AArBWb,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAiB,SAApBjB,oBAAoB;AAAA","names":["HttpTokenInterceptor","constructor","jwtService","intercept","req","next","isFileUpload","url","includes","responseType","headersConfig","token","getToken","request","clone","setHeaders","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\interceptors\\http.token.interceptor.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { JwtService } from '../services';\r\n\r\n@Injectable()\r\nexport class HttpTokenInterceptor implements HttpInterceptor {\r\n  constructor(private jwtService: JwtService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const isFileUpload = req.url.includes('archivos') || req.responseType === 'arraybuffer';\r\n    const headersConfig = {\r\n       ...( !isFileUpload && ({\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n       })),\r\n      'Authorization' : ''\r\n    };\r\n\r\n    const token = this.jwtService.getToken();\r\n\r\n    if (token) {\r\n      headersConfig['Authorization'] = `Token ${token}`;\r\n    }\r\n\r\n    const request = req.clone({ setHeaders: headersConfig });\r\n    return next.handle(request);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}