{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nexport class DepartmentsService {\n  constructor(jwtService, apiService, postService, getService) {\n    this.jwtService = jwtService;\n    this.apiService = apiService;\n    this.postService = postService;\n    this.getService = getService;\n  }\n  getDepartments() {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.apiService.getAll('/departamentos', new HttpParams(), headers);\n  }\n  obtenerDepartamento() {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.getAll('/departamentos', new HttpParams(), headers);\n  }\n  createDepartment(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.post('/departamentos', request, {\n      headers\n    });\n  }\n  editDepartment(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.put(`/departamentos/${request._id}`, request, {\n      headers\n    });\n  }\n  deleteDepartment(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.delete(`/departamentos/eliminar/${id}`, {\n      headers\n    });\n  }\n  materializeResponseToDepartments(response) {\n    const departments = [];\n    response.forEach(department => {\n      departments.push({\n        _id: department._id,\n        nombreDepartamento: department.nombreDepartamento,\n        descripcion: department.descripcion,\n        creador_id: department.creador_id,\n        modificador_id: department.modificador_id,\n        esta_eliminado: department.esta_eliminado,\n        creado_a: department.creado_a,\n        actualizado_a: department.actualizado_a\n      });\n    });\n    return departments;\n  }\n}\nDepartmentsService.ɵfac = function DepartmentsService_Factory(t) {\n  return new (t || DepartmentsService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService));\n};\nDepartmentsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DepartmentsService,\n  factory: DepartmentsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","helper","DepartmentsService","constructor","jwtService","apiService","postService","getService","getDepartments","token","getToken","isNullOrWhitespace","Error","headers","getAll","obtenerDepartamento","createDepartment","request","post","editDepartment","put","_id","deleteDepartment","id","delete","materializeResponseToDepartments","response","departments","forEach","department","push","nombreDepartamento","descripcion","creador_id","modificador_id","esta_eliminado","creado_a","actualizado_a","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\departments.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport  { \r\n  Department,\r\n  DepartmentCreate,\r\n  DepartmentDelete,\r\n  DepartmentEdit,\r\n  DepartmentResponse,\r\n  MessageResponse\r\n        } from '../interfaces/department.interface';\r\nimport { ApiService } from './api.service';\r\nimport { JwtService } from './jwt.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport * as helper from '../helpers';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DepartmentsService {\r\n\r\n  constructor(private jwtService: JwtService, \r\n    private apiService: ApiService<Department>,\r\n    private postService: ApiService<MessageResponse>,\r\n    private getService: ApiService<DepartmentResponse>\r\n    ) { }\r\n\r\n  getDepartments(): Observable<Department[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.apiService.getAll('/departamentos', new HttpParams(), headers);\r\n  }\r\n\r\n  obtenerDepartamento(): Observable<DepartmentResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.getAll('/departamentos',  new HttpParams(), headers);\r\n  }\r\n\r\n  createDepartment(request: DepartmentCreate): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.post('/departamentos', request, { headers });\r\n  }\r\n\r\n  editDepartment(request: DepartmentEdit): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.put(`/departamentos/${request._id}`, request, { headers });\r\n  }\r\n\r\n  deleteDepartment(id: string): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.delete(`/departamentos/eliminar/${id}`, { headers });\r\n  }\r\n  \r\n\r\n  materializeResponseToDepartments(response: any): Department[] {\r\n    const departments: Department[] = [];\r\n    response.forEach((department: any) => {\r\n      departments.push({\r\n        _id: department._id,\r\n        nombreDepartamento: department.nombreDepartamento,\r\n        descripcion: department.descripcion,\r\n        creador_id: department.creador_id,\r\n        modificador_id: department.modificador_id,\r\n        esta_eliminado: department.esta_eliminado,\r\n        creado_a: department.creado_a,\r\n        actualizado_a: department.actualizado_a\r\n      });\r\n    });\r\n    return departments;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}