{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nexport class StatusService {\n  constructor(jwtService, postService, getService) {\n    this.jwtService = jwtService;\n    this.postService = postService;\n    this.getService = getService;\n  }\n  createStatus(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.post('/estados', request, {\n      headers\n    });\n  }\n  getStatuses() {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.getService.getAll('/estados', new HttpParams(), headers);\n  }\n  editStatus(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.put(`/estados/${request._id}`, request, {\n      headers\n    });\n  }\n  deleteStatus(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.delete(`/estados/eliminar/${id}`, {\n      headers\n    });\n  }\n  materializeStatus(statuses) {\n    const statusMaterialized = [];\n    statuses.forEach(status => {\n      statusMaterialized.push({\n        _id: status._id,\n        nombre: status.nombre,\n        color: status.color,\n        creador_id: status.creador_id,\n        modificador_id: status.modificador_id,\n        esta_eliminado: status.esta_eliminado,\n        creado_a: new Date(status.creado_a).toLocaleDateString('es-ES'),\n        actualizado_a: new Date(status.actualizado_a).toLocaleDateString('es-ES')\n      });\n    });\n    return statusMaterialized;\n  }\n}\nStatusService.ɵfac = function StatusService_Factory(t) {\n  return new (t || StatusService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService));\n};\nStatusService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StatusService,\n  factory: StatusService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","helper","StatusService","constructor","jwtService","postService","getService","createStatus","request","token","getToken","isNullOrWhitespace","Error","headers","post","getStatuses","getAll","editStatus","put","_id","deleteStatus","id","delete","materializeStatus","statuses","statusMaterialized","forEach","status","push","nombre","color","creador_id","modificador_id","esta_eliminado","creado_a","Date","toLocaleDateString","actualizado_a","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\status.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { StatusCreate, StatusEdit, StatusResponse, MessageResponse, Status } from '../interfaces/status.interface';\r\nimport { JwtService } from './jwt.service';\r\nimport { ApiService } from './api.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport * as helper from '../helpers';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StatusService {\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private postService: ApiService<MessageResponse>,\r\n    private getService: ApiService<StatusResponse>\r\n  ) {}\r\n\r\n  createStatus(request: StatusCreate): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.post('/estados', request, { headers });\r\n  }\r\n\r\n  getStatuses(): Observable<StatusResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.getService.getAll('/estados',  new HttpParams(), headers);\r\n  }\r\n\r\n  editStatus(request: StatusEdit): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.put(`/estados/${request._id}`, request, { headers });\r\n  }\r\n\r\n  deleteStatus(id: string): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.delete(`/estados/eliminar/${id}`, { headers });\r\n  }\r\n\r\n  materializeStatus(statuses: StatusResponse[]): Status[] {\r\n    const statusMaterialized: Status[] = [];\r\n    statuses.forEach((status) => {\r\n      statusMaterialized.push({\r\n        _id: status._id,\r\n        nombre: status.nombre,\r\n        color: status.color,\r\n        creador_id: status.creador_id,\r\n        modificador_id: status.modificador_id,\r\n        esta_eliminado: status.esta_eliminado,\r\n        creado_a: new Date(status.creado_a).toLocaleDateString('es-ES'),\r\n        actualizado_a: new Date(status.actualizado_a).toLocaleDateString('es-ES'),\r\n      });\r\n    }\r\n    );\r\n    return statusMaterialized;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}