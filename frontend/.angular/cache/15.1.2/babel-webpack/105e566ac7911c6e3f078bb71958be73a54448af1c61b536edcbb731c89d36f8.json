{"ast":null,"code":"import { BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport * as helper from '../helpers';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./\";\nexport class UserService {\n  constructor(apiService, postApiService, getAllApiService, jwtService) {\n    this.apiService = apiService;\n    this.postApiService = postApiService;\n    this.getAllApiService = getAllApiService;\n    this.jwtService = jwtService;\n    this.currentUserSubject = new BehaviorSubject({});\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticatedSubject = new ReplaySubject(1);\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n  }\n  // Verify JWT in localstorage with server & load user's info.\n  // This runs once on application startup.\n  populate() {\n    // If JWT detected, attempt to get & store user's info\n    const token = this.jwtService.getToken() ?? '';\n    const userInfo = this.jwtService.getUserInfo() ?? '{}';\n    const user = JSON.parse(userInfo) ?? '{}';\n    if (!helper.isFullObject(user)) {\n      this.purgeAuth();\n      return;\n    }\n    if (!helper.isNullOrWhitespace(token) && helper.isFullObject(user)) {\n      const params = new HttpParams().set('email', user.userInfo.email);\n      this.apiService.get(`/get-user-by-email`, params).subscribe({\n        next: data => {\n          this.setAuth(data.user);\n        },\n        error: err => this.purgeAuth()\n      });\n    } else {\n      // Remove any potential remnants of previous auth states\n      this.purgeAuth();\n    }\n  }\n  registerNewUser(type, credentials, email, names, lastNames, telefono, isAdministrator, isUser) {\n    const route = type === 'register' ? '/register' : '';\n    const request = {\n      nombres: names,\n      apellidos: lastNames,\n      email,\n      telefono,\n      password: credentials,\n      isAdministrator,\n      isUser\n    };\n    return this.postApiService.post(route, request);\n  }\n  setAuth(user) {\n    // Save JWT sent from server in localstorage\n    this.jwtService.saveToken(user.token);\n    this.jwtService.saveUserInfo(user);\n    this.jwtService.saveAuthenticated(true);\n    // Set current user data into observable\n    this.currentUserSubject.next(user);\n    // Set isAuthenticated to true\n    this.isAuthenticatedSubject.next(true);\n  }\n  purgeAuth() {\n    // Remove JWT from localstorage\n    this.jwtService.destroyAuthetication();\n    // Set current user to an empty object\n    this.currentUserSubject.next({});\n    // Set auth status to false\n    this.isAuthenticatedSubject.next(false);\n  }\n  attemptAuth(type, credentials, email) {\n    const route = type === 'login' ? '/login' : '';\n    return this.postApiService.postForm(`${route}`, {\n      password: credentials,\n      email\n    }).pipe(map(data => {\n      this.setAuth(data);\n      return data;\n    }));\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  // Update the user on the server (email, pass, etc)\n  update(user) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.apiService.put('/update-user', user, {\n      headers\n    }).pipe(map(data => {\n      // Update the currentUser observable\n      this.currentUserSubject.next(data.user);\n      return data.user;\n    }));\n  }\n  getAllUsers() {\n    return this.getAllApiService.getAll('/get-all-users', new HttpParams(), new HttpHeaders());\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i1.JwtService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","ReplaySubject","map","distinctUntilChanged","helper","HttpHeaders","HttpParams","UserService","constructor","apiService","postApiService","getAllApiService","jwtService","currentUserSubject","asObservable","pipe","isAuthenticatedSubject","populate","token","getToken","userInfo","getUserInfo","user","JSON","parse","isFullObject","purgeAuth","isNullOrWhitespace","params","set","email","get","subscribe","next","data","setAuth","error","err","registerNewUser","type","credentials","names","lastNames","telefono","isAdministrator","isUser","route","request","nombres","apellidos","password","post","saveToken","saveUserInfo","saveAuthenticated","destroyAuthetication","attemptAuth","postForm","getCurrentUser","value","update","Error","headers","put","getAllUsers","getAll","factory"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject, ReplaySubject } from 'rxjs';\r\nimport { ApiService, JwtService } from './';\r\nimport { map, distinctUntilChanged } from 'rxjs/operators';\r\nimport { GetAllUserResponse, GetUserResponse, UserResponse } from '../interfaces/user.interface';\r\nimport * as helper from '../helpers';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  private currentUserSubject = new BehaviorSubject<UserResponse>(\r\n    {} as UserResponse\r\n  );\r\n  public currentUser = this.currentUserSubject\r\n    .asObservable()\r\n    .pipe(distinctUntilChanged());\r\n\r\n  private isAuthenticatedSubject = new ReplaySubject<boolean>(1);\r\n  public isAuthenticated = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(\r\n    private apiService: ApiService<GetUserResponse>,\r\n    private postApiService: ApiService<UserResponse>,\r\n    private getAllApiService: ApiService<GetAllUserResponse>,\r\n    private jwtService: JwtService,\r\n  ) {}\r\n\r\n  // Verify JWT in localstorage with server & load user's info.\r\n  // This runs once on application startup.\r\n  populate() {\r\n    // If JWT detected, attempt to get & store user's info\r\n    const token = this.jwtService.getToken() ?? '';\r\n    const userInfo = this.jwtService.getUserInfo() ?? '{}';\r\n    const user:UserResponse = JSON.parse(userInfo) ?? '{}';\r\n    if (!helper.isFullObject(user)) {\r\n      this.purgeAuth();\r\n      return;\r\n    }\r\n    if (!helper.isNullOrWhitespace(token) && helper.isFullObject(user)) {\r\n      const params = new HttpParams().set('email', user.userInfo.email);\r\n      this.apiService.get(`/get-user-by-email`, params).subscribe({\r\n        next: (data) => {\r\n          this.setAuth(data.user);\r\n        },\r\n        error: (err) => this.purgeAuth(),\r\n      });\r\n    } else {\r\n      // Remove any potential remnants of previous auth states\r\n      this.purgeAuth();\r\n    }\r\n  }\r\n\r\n  registerNewUser(\r\n    type: string,\r\n    credentials: string,\r\n    email: string,\r\n    names: string,\r\n    lastNames: string,\r\n    telefono: string,\r\n    isAdministrator: boolean,\r\n    isUser: boolean\r\n  ): Observable<UserResponse> {\r\n    const route = type === 'register' ? '/register' : '';\r\n    const request = {\r\n      nombres: names,\r\n      apellidos: lastNames,\r\n      email,\r\n      telefono,\r\n      password: credentials,\r\n      isAdministrator,\r\n      isUser,\r\n    };\r\n\r\n    return this.postApiService.post(route, request);\r\n  }\r\n\r\n  setAuth(user: UserResponse) {\r\n    // Save JWT sent from server in localstorage\r\n    this.jwtService.saveToken(user.token!);\r\n    this.jwtService.saveUserInfo(user);\r\n    this.jwtService.saveAuthenticated(true);\r\n    // Set current user data into observable\r\n    this.currentUserSubject.next(user);\r\n    // Set isAuthenticated to true\r\n    this.isAuthenticatedSubject.next(true);\r\n  }\r\n\r\n  purgeAuth() {\r\n    // Remove JWT from localstorage\r\n    this.jwtService.destroyAuthetication();\r\n    // Set current user to an empty object\r\n    this.currentUserSubject.next({} as UserResponse);\r\n    // Set auth status to false\r\n    this.isAuthenticatedSubject.next(false);\r\n  }\r\n\r\n  attemptAuth(\r\n    type: string,\r\n    credentials: string,\r\n    email: string\r\n  ): Observable<UserResponse> {\r\n    const route = type === 'login' ? '/login' : '';\r\n    return this.postApiService\r\n      .postForm(`${route}`, { password: credentials, email })\r\n      .pipe(\r\n        map((data) => {\r\n          this.setAuth(data);\r\n          return data;\r\n        })\r\n      );\r\n  }\r\n\r\n  getCurrentUser(): UserResponse {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  // Update the user on the server (email, pass, etc)\r\n  update(user: any): Observable<UserResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n    return this.apiService.put('/update-user',  user, { headers } ).pipe(\r\n      map((data) => {\r\n        // Update the currentUser observable\r\n        this.currentUserSubject.next(data.user);\r\n        return data.user;\r\n      })\r\n    );\r\n  }\r\n\r\n  getAllUsers(): Observable<GetAllUserResponse[]> {\r\n    return this.getAllApiService.getAll('/get-all-users', new HttpParams(), new HttpHeaders());\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}