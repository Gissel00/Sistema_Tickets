{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as helper from '../helpers';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./jwt.service\";\nimport * as i2 from \"./api.service\";\nexport class HistoryTicketsService {\n  constructor(jwtService, apiService, postService, getReportService) {\n    this.jwtService = jwtService;\n    this.apiService = apiService;\n    this.postService = postService;\n    this.getReportService = getReportService;\n  }\n  getHistoryByTicket(ticket) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.apiService.getAll(`/historico/${ticket}`, new HttpParams(), headers);\n  }\n  crearNuevaActividad(request = {}) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.post(`/historico`, request, {\n      headers\n    });\n  }\n  reasignTicketToUser(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.put(`/historico/reasignar/${request.ticket_id}`, request, {\n      headers\n    });\n  }\n  completeTicketActivity(id) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    return this.postService.put(`/historico/completar/${id}`, {}, {\n      headers\n    });\n  }\n  assignTimeResolution(response, flujos, ticket) {\n    let historyList = [];\n    const ticketFlujo = flujos.find(flujo => flujo.nombre === ticket.flujo);\n    response.forEach(element => {\n      const history = {\n        ticket_id: element.ticket_id._id.toString(),\n        departamento_id: element.departamento_id.nombreDepartamento,\n        creador_id: element.creador_id.email,\n        compleado_a: element.compleado_a != undefined ? new Date(element.compleado_a).toLocaleString('es-ES') : '',\n        asignado_id: element.asignado_id != undefined ? element.asignado_id.email : '',\n        modificador_id: element.modificador_id != undefined ? element.modificador_id.email : '',\n        creado_a: new Date(element.creado_a).toLocaleString('es-ES'),\n        actualizado_a: new Date(element.actualizado_a).toLocaleString('es-ES'),\n        tiempoEstimadoResolucion: (ticketFlujo?.tiempo_resolucion || 0).toString() + ' horas',\n        tiempoRealResolucion: element.compleado_a != undefined ? helper.getDiffInHours(element.creado_a, element.compleado_a) + ' horas' : '0.00 horas',\n        tiempoResolucionHorasOficina: element.tiempoResolucionHorasOficina != undefined ? element.tiempoResolucionHorasOficina : ''\n      };\n      historyList.push(history);\n    });\n    return historyList;\n  }\n  getReportTickets(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    const params = new HttpParams().set('fechaInicio', request.dateStart.toISOString()).set('fechaFin', request.dateEnd.toISOString());\n    return this.getReportService.getAll(`/historico-reporte`, params, headers);\n  }\n  getReportTicketsByDepto(request) {\n    const token = this.jwtService.getToken();\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'x-access-token': `${token}`\n    });\n    const params = new HttpParams().set('fechaInicio', request.dateStart.toISOString()).set('fechaFin', request.dateEnd.toISOString());\n    return this.getReportService.getAll(`/historico-reporte-departamentos`, params, headers);\n  }\n}\nHistoryTicketsService.ɵfac = function HistoryTicketsService_Factory(t) {\n  return new (t || HistoryTicketsService)(i0.ɵɵinject(i1.JwtService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i2.ApiService));\n};\nHistoryTicketsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HistoryTicketsService,\n  factory: HistoryTicketsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","HttpParams","helper","HistoryTicketsService","constructor","jwtService","apiService","postService","getReportService","getHistoryByTicket","ticket","token","getToken","isNullOrWhitespace","Error","headers","getAll","crearNuevaActividad","request","post","reasignTicketToUser","put","ticket_id","completeTicketActivity","id","assignTimeResolution","response","flujos","historyList","ticketFlujo","find","flujo","nombre","forEach","element","history","_id","toString","departamento_id","nombreDepartamento","creador_id","email","compleado_a","undefined","Date","toLocaleString","asignado_id","modificador_id","creado_a","actualizado_a","tiempoEstimadoResolucion","tiempo_resolucion","tiempoRealResolucion","getDiffInHours","tiempoResolucionHorasOficina","push","getReportTickets","params","set","dateStart","toISOString","dateEnd","getReportTicketsByDepto","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\nayeli\\OneDrive\\Escritorio\\service-desk\\frontend\\src\\app\\core\\services\\history.tickets.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { historyRequest, HistoryResponse, HistoryTable, Ticket } from '../interfaces/ticket.interface';\r\nimport { ApiService } from './api.service';\r\nimport { JwtService } from './jwt.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport * as helper from '../helpers';\r\nimport { MessageResponse } from '../interfaces/status.interface';\r\nimport { Flujo } from '../interfaces/flujo.interface';\r\nimport { ReportRequest, ReportResponse } from '../interfaces/report.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HistoryTicketsService {\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private apiService: ApiService<HistoryResponse>,\r\n    private postService: ApiService<MessageResponse>,\r\n    private getReportService: ApiService<ReportResponse>\r\n  ) {}\r\n\r\n  getHistoryByTicket(ticket: number): Observable<HistoryResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.apiService.getAll(\r\n      `/historico/${ticket}`,\r\n      new HttpParams(),\r\n      headers\r\n    );\r\n  }\r\n\r\n  crearNuevaActividad(request: Object = {}): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.post(`/historico`, request, { headers });\r\n  }\r\n\r\n  reasignTicketToUser(request: historyRequest): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.put(\r\n      `/historico/reasignar/${request.ticket_id}`,\r\n      request,\r\n      { headers }\r\n    );\r\n  }\r\n\r\n  completeTicketActivity(id: number): Observable<MessageResponse> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n\r\n    return this.postService.put(`/historico/completar/${id}`, {}, { headers });\r\n  }\r\n\r\n  assignTimeResolution(\r\n    response: HistoryResponse[],\r\n    flujos: Flujo[],\r\n    ticket: Ticket\r\n  ): HistoryTable[] {\r\n    let historyList: HistoryTable[] = [];\r\n    const ticketFlujo = flujos.find((flujo) => flujo.nombre === ticket.flujo);\r\n\r\n    response.forEach((element) => {\r\n      const history: HistoryTable = {\r\n        ticket_id: element.ticket_id._id.toString(),\r\n        departamento_id: element.departamento_id.nombreDepartamento,\r\n        creador_id: element.creador_id.email,\r\n        compleado_a:\r\n          element.compleado_a != undefined\r\n            ? new Date(element.compleado_a).toLocaleString('es-ES')\r\n            : '',\r\n        asignado_id:\r\n          element.asignado_id != undefined ? element.asignado_id.email : '',\r\n        modificador_id:\r\n          element.modificador_id != undefined\r\n            ? element.modificador_id.email\r\n            : '',\r\n        creado_a: new Date(element.creado_a).toLocaleString('es-ES'),\r\n        actualizado_a: new Date(element.actualizado_a).toLocaleString('es-ES'),\r\n        tiempoEstimadoResolucion:\r\n          (ticketFlujo?.tiempo_resolucion || 0).toString() + ' horas',\r\n        tiempoRealResolucion:\r\n          element.compleado_a != undefined\r\n            ? helper.getDiffInHours(element.creado_a, element.compleado_a) +\r\n              ' horas'\r\n            :  '0.00 horas',\r\n        tiempoResolucionHorasOficina: element.tiempoResolucionHorasOficina != undefined ? element.tiempoResolucionHorasOficina : ''\r\n      };\r\n      historyList.push(history);\r\n    });\r\n    return historyList;\r\n  }\r\n\r\n  getReportTickets(request: ReportRequest): Observable<ReportResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n    const params = new HttpParams()\r\n      .set('fechaInicio', request.dateStart.toISOString())\r\n      .set('fechaFin', request.dateEnd.toISOString());\r\n\r\n    return this.getReportService.getAll(\r\n      `/historico-reporte`,\r\n      params,\r\n      headers\r\n    );\r\n  }\r\n\r\n  getReportTicketsByDepto(request: ReportRequest): Observable<ReportResponse[]> {\r\n    const token = this.jwtService.getToken();\r\n    if (helper.isNullOrWhitespace(token)) throw new Error('No token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'x-access-token': `${token}`,\r\n    });\r\n    const params = new HttpParams()\r\n      .set('fechaInicio', request.dateStart.toISOString())\r\n      .set('fechaFin', request.dateEnd.toISOString());\r\n\r\n    return this.getReportService.getAll(\r\n      `/historico-reporte-departamentos`,\r\n      params,\r\n      headers\r\n    );\r\n  }  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}